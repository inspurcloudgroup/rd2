#c++学习
	#c++字符串
		c++里面拥有两种类型的字符串表达形式：
			c风格字符串(char)
				char是C/C++整型数据中比较古怪的一个，其它的如int/long/short等不指定
				signed/unsigned时都默认是signed，但char在标准中不指定为signed/unsigned，
				编译器可以实现为带符号的，也可以实现为不带符号的，如下：
					char *p="abcd";				//可以通过c++编译
					signed char *p="abcd";		//不可以通过c++编译
					unsigned char *p="abcd";	//不能通过c++编译
			c++引入的string类类型
			
		c风格字符串
			c风格字符串实际上是使用了nul字符''终止的一维字符数组，例如：
				char a[] = hello;
				实际上存储的"hello"是这样的"h"、"e"、"l"、"l"、"o"、"\0"，也就是我们
				不需要刻意的去添加null在字符串末尾，c++编译器编译的时候会自动添加。
			同时，c++中有许多用于处理以null结尾的字符串的函数，如下：
				strcpy(a,b); --->  复制字符串b到字符串a，例如：
					char a[] = "111";
					char b[] = "222";
					strcpy(a,b);
					输出a得到的结果是"222";
				strcat(a,b); ---> 把字符串b连接到a的末尾
					char a[] = "111";
					char b[] = "222";
					strcat(a,b);
					输出a得到的结果是"111222";
				strlen(a); ---> 返回a的字符串长度
					char a[] = "111";
					strlen(a);
					输出a得到的结果是3;
				strcmp(a,b); ---> 如果a和b相同，则返回0；如果a>b，则返回大于0；否则，返回小于0；
					char a[] = "111";
					char b[] = "222";
					输出strcat(a,b)得到的结果是-1;
				strchr(a,x); ---> 返回一个指针，指向a中字符x出现的第一次位置到a字符串末尾的字符串；
					char a[] = "asjhajhjask";
					输出strchr(a,j)的结果为"jhajhjask"；
				strstr(a,b); ---> 返回一个指针，指向字符串a中字符串b第一次出现的位置
				
		c++中的string类
			定义：
				string 名称 = "****";
			复制：
				string a = "1";
				string b = "2";
				a = b;
			链接：
				string a = "1";
				string b = "2";
				a = a + b;
			长度计算：
				len = a.size();
				
				
	##初始化列表
		在c++中普通数组、POD（plain old data，没有构造、析构和虚函数的类或结构体）
		类型都可以使用 {} 进行初始化，也就是我们所说的初始化列表。而对于类对象的
		初始化，要么需要通过拷贝构造、要么就需要使用 () 进行。这些不同方法都针对
		各自对象，不能通用。
		例如：
			int arr[3] = {3,5,7};	//数组初始化
			class Foo {
			private:
				int value;
			public:
				Foo(int) {}
			};
			Foo foo(1);             // 普通构造初始化
		为了解决这个问题，C++11 首先把初始化列表的概念绑定到了类型上，并将其称之为
		std::initializer_list，允许构造函数或其他函数像参数一样使用初始化列表，这就
		为类对象的初始化与普通数组和 POD 的初始化方法提供了统一的桥梁。
		例如：
			#include <initializer_list>
			class Magic {
			public:
				Magic(std::initializer_list<int> list) {}
			};
			Magic magic = {1,2,3,4,5};
			std::vector<int> v = {1, 2, 3, 4};

			
##心得
	初始化列表还没弄太明白，需要加深c++知识的理解以及c++基础的学习

	
###明日计划
	弄明白初始化列表
	继续学习c++
