#c++基础学习
    #修饰符类型
	c++允许在char、int、double数据类型前面防止修饰符。
	修饰符是用来改变基本类型的含义的。
	数据类型修饰符有：
	signed  有符号
	unsigned  无符号
	long	长型
	short	短型
	修饰符 signed、unsigned、long 和 short 可应用于整型，signed 和 unsigned 可应用于字符型，long 可应用于双精度型。	
	修饰符 signed 和 unsigned 也可以作为 long 或 short 修饰符的前缀。例如：unsigned long int。
	区别有符号和无符号的区别，例如：
	short signed int i;
	short unsigned int j;
	j=50000;
	i=j;
	结果为：j=50000;i=-15536
	
    #类型限定符
	const：const修饰的对象在程序执行期间是不能进行修改的。
	volatile：被volatile修饰的对象的值可能以程序未明确指定的方式被改变。
	restrict：restrict修饰的指针是唯一一种访问它所指向的对象的方式，只有C99增加了新的类型限定符restrict。

    ###存储类
	auto存储类：
		auto是所有局部变量默认的存储类。auto只能用在函数内，即auto只能修饰局部变量。
	register存储类：
		register存储类用于定义存储在寄存器中的局部变量（不是RAM中的局部变量）。因此，register定义的变量的最大尺寸等于寄存器的大小，
		（通常是一个词），注意：不能对该变量进行一元的'&'运算，因为他是没有内存位置的。
	static存储类：
		局部变量：
			static存储类会让static修饰的局部变量变量在程序的周期生命里面持续存在，不需要每次在该变量进入和离开作用域的时候去创
      建和销毁。因此，static修饰的局部变量可以在函数调用之间保持局部变量所定义的值。
		全局变量：
			static修饰的全局变量时，会使变量的作用域限制在声明它的文件内。
	extern存储类：
		external存储类用于提供一个全局变量的引用，例如：
			文件A：
				#include<iostream>
				
				int A;
				extern void B();//引用方法B（），从而可以在后续代码进行该方法的使用
				
				main(){
					A = 5;
					B();
					}

			文件B：
				#include<iostream>
				
				extern int A；//引用变量A，从而可以直接使用变量A，即将A文件中的变量A=5传递到B文件中
				
				void B（void）{
					std::cout << "A is" << A << std::endl;
						}
			执行文件两个文件得到的结果是：A is 5.

	mutable存储类型：
		****

    ####运算符
	算术运算、逻辑运算符：
		c++的算术运算、逻辑运算符跟java的算术运算是一样的。
	关系运算：
		== ：判断两个操作数是否相等。
		！=：跟==正好相反，判断两个操作数是否不相等。
		<、<= 、 > 、 >= ：对操作数进行大小比较。
	位运算符：
		位运算符包括 & 、 | 、 ^ 、 ~  、 << 、>>
		在进行位运算时需要先将操作数转化成二进制数，从左到右一一对应排列
			& ：当对应的数值均为 1 时，结果才为1，否则都为0；
			| ：当对应的数值都为 0 时，结果才为0，否则为1；
			^ ：当对应的数值相等时结果为0；否则为1；
			~ ：对操作数进行翻转；
			<< ：操作数向左移动a位数（M << a）；
			>>：操作数向右移动a位数（M >> a）。	

##c++学习
  #区间迭代
      基于范围的 for 循环：
          C++11 引入了基于范围的迭代写法，我们拥有了能够写出像 Python 一样简洁的循环语句：
              int arr[]={1,1,2};
              for(auto &x : arr) {//遍历array
              std::cout << x << std::endl;
              }
          之前的方法，for循环中需要获取初始值和末尾值来进行条件判断，从而执行遍历过程：
          std::vector<int> arr(5, 100);
          for(std::vector<int>::iterator i = arr.begin(); i != arr.end(); ++i) {
              std::cout << *i << std::endl;
          }
          就相当于与用 auto &x : arr  来替换 std::vector<int>::iterator i = arr.begin(); i != arr.end(); ++i  这一块代码，相比之下使用auto
          能使代码更简洁。
      
  ##初始化列表
      初始化是一个非常重要的语言特性，最常见的就是对对象进行初始化。在传统 C++ 中，不同的对象有着不同的初始化方法，例如普通数组、POD （plain old 
      data，没有构造、析构和虚函数的类或结构体）类型都可以使用 {} 进行初始化，也就是我们所说的初始化列表。而对于类对象的初始化，要么需要通过拷贝构
      造、要么就需要使用 () 进行。这些不同方法都针对各自对象，不能通用。
      例如：
          int arr[4]={1,2,3,4};//对arr数组进行初始化
 
 
 
###学习心得
    今天主要针对c++的基础语法进行了学习，感觉比直接学习深入的内容更清晰，逐渐明白之前学习的有些内容为什么要那样去写。
    
####明日计划
    学习c++基础
    跟着实验楼的进度学习c++





		
