#c++学习
	#类的构造函数
			类的构造函数是类的一种特殊的成员函数，它会在每次创建类的新对象时执行。
			就相当于在每次执行程序加载对象的时候，会先加载构造函数的内容。
			构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返
		回 void。构造函数可用于为某些成员变量设置初始值。
			示例如下：
				#include <iostream>
 
				using namespace std;
				 
				class Line
				{
				   public:
					  void setLength( double len );
					  double getLength( void );
					  Line();  // 这是构造函数
				 
				   private:
					  double length;
				};
				 
				// 成员函数定义，包括构造函数
				Line::Line(void)
				{
					cout << "Object is being created" << endl;
				}
				 
				void Line::setLength( double len )
				{
					length = len;
				}
				 
				double Line::getLength( void )
				{
					return length;
				}
				// 程序的主函数
				int main( )
				{
				   Line line;
				 
				   // 设置长度
				   line.setLength(6.0); 
				   cout << "Length of line : " << line.getLength() <<endl;
				 
				   return 0;
				}
				执行结果如下
				Object is being created
				Length of line : 6
	
	##带参数的构造函数
			默认的构造函数没有任何参数，但如果需要，构造函数也可以带有参数。这样在
		创建对象时就会给对象赋初始值。
			如下面的例子所示：
				#include <iostream>
 
				using namespace std;
				 
				class Line
				{
				   public:
					  void setLength( double len );
					  double getLength( void );
					  Line(double len);  // 这是构造函数
				 
				   private:
					  double length;
				};
				 
				// 成员函数定义，包括构造函数
				Line::Line( double len)
				{
					cout << "Object is being created, length = " << len << endl;
					length = len;
				}
				 
				void Line::setLength( double len )
				{
					length = len;
				}
				 
				double Line::getLength( void )
				{
					return length;
				}
				// 程序的主函数
				int main( )
				{
				   Line line(10.0);
				 
				   // 获取默认设置的长度
				   cout << "Length of line : " << line.getLength() <<endl;
				   // 再次设置长度
				   line.setLength(6.0); 
				   cout << "Length of line : " << line.getLength() <<endl;
				 
				   return 0;
				}
				执行结果如下：
					Object is being created, length = 10
					Length of line : 10
					Length of line : 6
	
	###使用初始化列表来初始化字段
			使用初始化列表来初始化字段相当于给字段赋值，
			具体如下：
				Line::Line( double len): length(len)
				{
					cout << "Object is being created, length = " << len << endl;
				}
			===>等同于
				Line::Line( double len)
				{
					length = len;
					cout << "Object is being created, length = " << len << endl;
				}
				**注意：如果有多个字段需要进行初始化，每个字段之间可以使用逗号进行连接
					如：Line::Line( double len): length1(len1),length2(len2),length3(len3){}

	####类的析构函数
			类的析构函数是类的一种特殊的成员函数，它会在每次删除所创建的对象时执行。
			析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前
		缀，它不会返回任何值，也不能带有任何参数。析构函数有助于在跳出程序（比如关闭
		文件、释放内存等）前释放资源。
			示例如下：
				#include <iostream>
 
				using namespace std;
				 
				class Line
				{
				   public:
					  void setLength( double len );
					  double getLength( void );
					  Line();   // 这是构造函数声明
					  ~Line();  // 这是析构函数声明
				 
				   private:
					  double length;
				};
				 
				// 成员函数定义，包括构造函数
				Line::Line(void)
				{
					cout << "Object is being created" << endl;
				}
				Line::~Line(void)
				{
					cout << "Object is being deleted" << endl;
				}
				 
				void Line::setLength( double len )
				{
					length = len;
				}
				 
				double Line::getLength( void )
				{
					return length;
				}
				// 程序的主函数
				int main( )
				{
				   Line line;
				 
				   // 设置长度
				   line.setLength(6.0); 
				   cout << "Length of line : " << line.getLength() <<endl;
				 
				   return 0;
				}
				执行结果为：
					Object is being created
					Length of line : 6
					Object is being deleted
				好比，在整个程序开始时第一步执行构造函数内容，第二步执行其他内容，
				最后执行析构函数。


##学习心得
	从每一个小点逐步弄明白c++的语言语法等知识，让人能更加有效地吸收和掌握知识点。
	

###明日计划	
	继续学习计划







	
