#c++学习
	#强类型枚举
			在传统c++中，枚举类型并非类型安全，枚举类型会被视作整数，则会让两种完全不
		同的枚举类型可以进行直接的比较（虽然编译器给出了检查，但并非所有），甚至枚举
		类型的枚举值名字不能相同，这不是我们希望看到的结果。
			c++11引入枚举类，并使用enum class 的语法进行声明：
				enum class new_enum : unsigned int{
					value1,
					value2,
					value3 = 100,
					value4 = 100
				
				};
				
			这样定义的枚举实现了类型安全，首先他不能够被隐式的转换为整数，同时也不能
		够将其与整数数字进行比较，更不可能对不同的枚举类型的枚举值进行比较。
		**但是相同值之间如果指定的值相同，那么可以进行比较：
		**如下：
			if(new_enum::value3 == new_enum :: value4){
				//会输出
				std::cout << "new_enum::value3 == new_enum::value4" << std::end;
			}
			这个语法中，枚举类型后面使用了冒号及类型关键字来指定枚举中枚举值的类型，
		这使得我们能够为枚举赋值（未指定时将默认使用int）。
			而我们希望获得枚举值得值时，将必须显示的进行类型转换，不过我们可以通过重
		载 << 这个运算符来，可以收藏下面这个代码段：
			#include<iostream>
			template<typename T>
			std::ostream% operator<<(typename std::enable_if<std::is_enum<T>::walue,std::)
			{
				return stream << static_cast<typename std::underlying_typpe<T>::type(e);
			
			}
			这时候，下面的代码将能够被编译：
				std::cout << new_enum::value << std::endl;
		
		##总结
				本节介绍了 C++11/14 中对语言可用性的增强，其中笔者认为最为重要的几个
			特性是几乎所有人都需要了解并熟练使用的：
				1.auto类型推导
				2.范围for迭代
				3.初始化列表
				4.变参模板
				5.本节代码：
						另由于各个编译器对标准支持的力度并不相同，所以当使用 g++ 无法编译时，
					可以使用别的编译器（clang++）再次尝试，比如 2.6.cpp 使用 clang++ 下就能
					正常编译，而 g++ 则会报错。（http://labfile.oss.aliyuncs.com/courses/605/2.zip）
		
		###Lambda表达式
				Lambda 表达式是 C++11 中最重要的新特性之一，而 Lambda 表达式，实际上就是提供
			了一个类似匿名函数的特性，而匿名函数则是在需要一个函数，但是又不想费力去命名一个
			函数的情况下去使用的。这样的场景其实有很多很多，所以匿名函数几乎是现代编程语言的
			标配。
			
			#Lambda 表达式基础
				Lambda 表达式的基本语法如下：
					[捕获列表](参数列表) mutable(可选) 异常属性 -> 返回类型 {
						// 函数体
					}
					上面的语法规则除了 [捕获列表] 内的东西外，其他部分都很好理解，只是一般
				函数的函数名被略去，返回值使用了一个 -> 的形式进行（我们在上一节前面的尾返
				回类型已经提到过这种写法了）。
					所谓捕获列表，其实可以理解为参数的一种类型，lambda 表达式内部函数体在默
				认情况下是不能够使用函数体外部的变量的，这时候捕获列表可以起到传递外部数据的
				作用。
				

##今日心得
		直接学习比较深入的c++学习还是有点吃力，还需要更多的去熟悉这些知识，不然整得很难搞明白怎
	么回事。
		
	
	###明日计划
		保持进度继续学习
		
		
		
