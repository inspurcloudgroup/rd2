	###c++指针
		每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号(&)运算符访问的地址，它表示了内存中的一个
		地址。例如：
			#include <iostream>
 
			using namespace std;
			 
			int main ()
			{
			   int  var1;
			   char var2[10];
			 
			   cout << "var1 变量的地址： ";
			   cout << &var1 << endl;
			 
			   cout << "var2 变量的地址： ";
			   cout << &var2 << endl;
			 
			   return 0;
			}
			当上面的代码被编译和执行时，它会产生下列结果：
				var1 变量的地址： 0xbfebd5c0
				var2 变量的地址： 0xbfebd5b6
				
		指针的定义
			指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，您必须在使
			用指针存储其他变量地址之前，对其进行声明。
			指针变量声明的一般形式为：
				type *var-name;
				
			在这里，type 是指针的基类型，它必须是一个有效的 C++ 数据类型，var-name 是指针变量的名称。用来声明指
			针的星号 * 与乘法中使用的星号是相同的。但是，在这个语句中，星号是用来指定一个变量是指针。
			以下是有效的指针声明：
				int    *ip;    /* 一个整型的指针 */
				double *dp;    /* 一个 double 型的指针 */
				float  *fp;    /* 一个浮点型的指针 */
				char   *ch;    /* 一个字符型的指针 */
			所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代
			表内存地址的长的十六进制数。不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。
		
		c++null指针
			在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。赋为 NULL
			值的指针被称为空指针。NULL 指针是一个定义在标准库中的值为零的常量。	
			例如：
				#include <iostream>

				using namespace std;

				int main ()
				{
				   int  *ptr = NULL;

				   cout << "ptr 的值是 " << ptr ;
				 
				   return 0;
				}
			当上面的代码被编译和执行时，它会产生下列结果：
				ptr 的值是 0
			之前不怎么明白null具体是怎么回事，但是经过编译可以发现，例如：
				#include<bits/stdc++.h>
					using namespace std;
					int main()
					{
						cout<<"null="<<NULL<<endl;
						return 0;
					}
			执行的返回结果为：
				null = 0
				
		指针的算术运算	
			指针是一个用数值表示的地址。因此，您可以对指针执行算术运算。可以对指针进行四种算术运算：++、--、+、-。
			例如：
				假设 ptr 是一个指向地址 1000 的整型指针，是一个 32 位的整数，让我们对该指针执行下列的算术运算：
					ptr++
				在执行完上述的运算之后，ptr 将指向位置 1004，因为 ptr 每增加一次，它都将指向下一个整数位置，即
				当前位置往后移 4 个字节。这个运算会在不影响内存位置中实际值的情况下，移动指针到下一个内存位置。
				如果 ptr 指向一个地址为 1000 的字符，上面的运算会导致指针指向位置 1001，因为下一个字符位置是在 1001。
				
			指针递增实例：
				#include <iostream>
 
				using namespace std;
				const int MAX = 3;
				 
				int main ()
				{
				   int  var[MAX] = {10, 100, 200};
				   int  *p;
				 
				   // 指针中的数组地址
				   p = var;
				   for (int i = 0; i < MAX; i++)
				   {
					  cout << "Address of var[" << i << "] = ";
					  cout << p << endl;
				 
					  cout << "Value of var[" << i << "] = ";
					  cout << *p << endl;
				 
					  // 移动到下一个位置
					  ptr++;
				   }
				   return 0;
				}
				例子中定义了指针p，再把数组var的值赋给指针，通过指针的自加可以实现，将数组遍历的目的。
				上面例子的结果为：
				Address of var[0] = 0xbfa088b0
				Value of var[0] = 10
				Address of var[1] = 0xbfa088b4
				Value of var[1] = 100
				Address of var[2] = 0xbfa088b8
				Value of var[2] = 200
				
			指针自减跟指针自增类似，也可以实现数组的遍历。
			
			指针也可以跟数值一样进行比较，可以用关系运算符进行大小比较，如 ==、< 和 >。如果 p1 和 p2 指向两个
			相关的变量，比如同一个数组中的不同元素，则可对 p1 和 p2 进行大小比较。
			例如：
				#include <iostream>
				 
				using namespace std;
				const int MAX = 3;
				 
				int main ()
				{
				   int  var[MAX] = {10, 100, 200};
				   int  *ptr;
				 
				   // 指针中第一个元素的地址
				   ptr = var;
				   int i = 0;
				   while ( ptr <= &var[MAX - 2] )
				   {
					  cout << "Address of var[" << i << "] = ";
					  cout << ptr << endl;
				 
					  cout << "Value of var[" << i << "] = ";
					  cout << *ptr << endl;
				 
					  // 指向上一个位置
					  ptr++;
					  i++;
				   }
				   return 0;
				}
			while循环中比较的是变化指针ptr和固定指针&var[1]的大小，在执行程序后的结果为：
				Address of var[0] = 0xbfce42d0
				Value of var[0] = 10
				Address of var[1] = 0xbfce42d4
				Value of var[1] = 100
			从结果可以看到，由于在i=3的时候，ptr指向的是var[2]的地址，要大于等号右侧的var[MAX - 2]，
			因此，结果在var[1]结束后就不会在继续执行。
