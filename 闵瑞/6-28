#c++学习
	#函数对象包装器	
		接昨天...
		#std::bind/std::placehoder
				std:cind是用来绑定函数调用的参数的，它解决的需求是我们有时候可能并不
			一定能够一次性获得调用某个函数的全部参数，通过这个函数，我们可以将部分调
			用参数提前绑定到函数身上成为一个新的对象，然后在参数齐全后，完成调用。
				如下：
					int foo(int a, int b, int c){
						
					
					}
					int main(){
						//首先将参数1，2绑定到函数foo上--
						//在使用的时候，用std::placehoder::_1来第一个参数进行占位
						auto blinFoo = std::blind(foo,std::placehoder::_1,1,2);
						
						//接下来调用bindFoo函数时，只需要提供第一个参数即可
						bindFoo(0);
					}
		
		##右值引用
				右值引用是c++11引入的跟Lambda表达式同等重要的特性之一。它的引入解决了
			C++ 中大量的历史遗留问题，消除了诸如 std::vector、std::string 之类的额外
			开销，也才使得函数对象容器 std::function 成为了可能。
			#左值、右值的纯右值（属于右值）、将亡值（属于右值）、右值
				##左值与右值
				**通常右值只能放在 = 的右边，而左值可以放在 = 号左边或者右边**	
					var = 1 + 2; // var在这是左值
					var + 1 = 2 + 3; // error, var + 1 是一个右值，因为var+1是一个临时的值
					int* p1 = &var; // var是一个左值
					int* p2 = &(var + 1); // error, var + 1 是一个右值，是临时存在的，如果
										  //没了值，即为空，指针指向的地址就为空，则会报错
				
						左值						右值
						
					有名称的值/对象				无名临时值/对象
					
				所有变量(包括const变量)		通常是字面量(数字、字符串)、临时对象或者表达式。
				
				##纯右值
					纯右值(prvalue, pure rvalue)，纯粹的右值，要么是纯粹的字面量，例如 10, 
				true；要么是求值结果相当于字面量或匿名临时对象，例如 1+2。非引用返回的临时
				变量、运算表达式产生的临时变量、原始字面量、Lambda 表达式都属于纯右值。
				
				###将亡值
					将亡值(xvalue, expiring value)，是 C++11 为了引入右值引用而提出的概念
				（因此在传统 C++中，纯右值和右值是统一个概念），也就是即将被销毁、却能够被
				移动的值。
					如下代码：
						std::vector<int> foo() {
							std::vector<int> temp = {1, 2, 3, 4};
							return temp;
						}

						std::vector<int> v = foo();
						在这样的代码中，函数 foo 的返回值 temp 在内部创建然后被赋值给 v，
						然而 v 获得这个对象时，会将整个 temp 拷贝一份，然后把 temp 销毁，
						如果这个 temp 非常大，这将造成大量额外的开销（这也就是传统 C++ 一
						直被诟病的问题）。在最后一行中，v 是左值、foo() 返回的值就是右值
						（也是纯右值）。
					
##今日心得
		c++中强调左右值的区别，刚开始理解有点晦涩，后来网上搜了一些相关的资料和别人的
	例子，逐渐理解了一些，还需要更深的理解。
	
	
###明日计划
	继续学习c++
