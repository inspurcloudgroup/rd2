#c++学习
	#c++指针
		#传递指针给函数
			c++允许传递指针给函数，只需要简单的声明函数参数为指针类型即可，
			语法：
				函数类型 函数名(参数类型 参数名/* 带星号的指针 */){
				......
				
				}
			例如：
				#include<iostream>
					using namespace std;
					void getSeconds(unsigned long *par);
					
					void getSeconds(unsigned long *par){
						//获取当前秒数
						*par = time(NULL);
						return;
						
						
					}
					
					int main(){
						unsigned long sec;
						
						//将秒数的地址传给sec的地址
						getSeconds(&sec);
						
						cout << "实际秒数为：" << sec << endl;
						cout << "实际秒数的地址为：" << &sec <<endl;
						
						return 0;
					
					}
			同时，能接受指针作为参数的函数，也可以接受数组作为参数，
			如下：
				#include<iostream>
					using namespace std;
					
					//声明函数getAverage
					double getAverage(int *arr, int size);
					
					double getAverage(int *arr, int size){
						int i ,sum = 0;
						double avg;
						
						for(i = 0; i < size; i++){
							sum += arr[i];
							
						
						}
						
						avg = double(sum) / size;
						
						return avg;
					}
					
					int main(){
						//定义一个带有3个元素的整形数组
						int balance[3] = {2, 4, 10};
						double avg;
						
						//将数组balance作为函数getAverage的参数，也就是指向数组的指针
						avg = getAverage( balance, 3);
						
						//输出返回值
						cout << "函数返回值为：" << avg << endl;
						
						return 0;
					}
					上述代码的执行结果为：
						函数返回值为：8
					由此可见，在函数参数里将一项参数设置为指针类型，可以将指针或者数组传给指针参数，
					都可以实现相应的结果。
			
			##从函数返回指针
				c++允许从函数返回指针，首先，必须要声明一个返回指针的函数，
				例如：
					int * myFunction(){
					
					......
					}
				但是，c++不支持在函数外部返回局部变量的地址，除非定义的局部变量为static变量。
				具体例子如下：
					#include<iostream>
					#include<ctime>
					
						using namespace std;
						
						//定义一个生成随机数的函数getRandom
						int * getRandom(){
						
							static int r[10];
							
							//设置种子，相当于给随机数一个参考
							//通过把参会时设为时间，可以让每一次运行获得的伪随机数不一样
							//如果需要一样的，则将参数设置为具体的数值
							srand( (unsigned) time(NULL) );
							
							for(int i = 0; i < 10; i++){
								//获取随机数
								r[i] = rand();
								cout << "随机数" << r[i] << "为:" << endl;
								
							}
							
						return r;
						}
						int main(){
							/定义一个指向整数的指针
							int *p;
							
							p = getRandom();
							for( int i = ; i < ; i++){
								cout << "*(p + " << i <<")";
								cout << *(p+1) << endl;
							}
						return 0;
						
						}
	##c++引用
		引用变量是一个别名，也就是说，他是某个已存在变量的另一个名字。一旦把引用初始化
		为某个变量，就可以使用该引用名称或者变量名称来指向该变量。
		
		#引用很容易与指针混淆，引用变量区别有三：
			一、不存在空引用。引用必须连接到一块合法的内存空间。
			二、一旦引用被初始化为一个对象，就不能被指向带另一个对象。指针可以在任何时
			候指向到另一个对象。
			三、引用必须在创建时被出示话。指针可以任何时间被初始化。
		
		##c++中创建引用
			可以通过原始变量的名称或者引用来访问变量的内容。
			例如：	
				int i = 17;
				我们可以将i声明为引用变量，如下：
					int& r = i;
				在上述声明中，& 读作引用。意思为"r是一个初始化为i的整型引用"。
			具体例子如下：
				#include <iostream>
 
					using namespace std;
					 
					int main ()
					{
					   // 声明简单的变量
					   int    i;
					   double d;
					 
					   // 声明引用变量
					   int&    r = i;
					   double& s = d;
					   
					   i = 5;
					   cout << "Value of i : " << i << endl;
					   cout << "Value of i reference : " << r  << endl;
					 
					   d = 11.7;
					   cout << "Value of d : " << d << endl;
					   cout << "Value of d reference : " << s  << endl;
					   
					   return 0;
					}
				上述代码结果为：
					Value of i : 5
					Value of i reference : 5
					Value of d : 11.7
					Value of d reference : 11.7
				

##今日心得
		指针是一块比较难理解的知识点，需要将他理解透彻，才能更好地灵活使用。
		

###明日计划
		学习c++基础
		学习c++语言运行期的强化
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
