#c++学习
	#Lambda表达式
		#捕获列表分类
			1.值捕获
					与参数传值类似，值捕获的 前期是变量，不同之处在于，被不会的变量
				在lambda表达式被创建时拷贝而非调用时才拷贝。
				具体实例如下：
					void lern_lambda_func_1(){
						int value_1 = 1;
						auto copy_value_1 = [value_1]{
							return value_1;
						
						}
						value_1 = 100;
						auto stored_value_1 = copy_value_1();
						//上面的stored_value_1 = 1,而不是100
						//因为copy_value_1在被创建时就保存了第一次赋值的value_1的值
						
						cout << "value_1 =" << value_1 << endl;
						cout << "stored_value_1=" << stored_value_1 << endl;
					}
					上述代码段的执行结果为：
						value_1 =100
						stored_value_1=1
						
			2.引用捕获
				与引用传参类似，引用捕获保存的是引用，值会发生变化。
				如下：
					void lern_lambda_func_2(){
						int value_2=1;
						auto copy_value_2 = [&value_2]{
						//这里copy_value_2的值是从value_2的地址里面拿过来用的
						//也就相当于等于的是一个变量，而不是一个具体的数值
						//这里就跟指针相关赋值问题类似
						//跟上面的不同，上面的得到的是valu_1的一个常量数值
						
							renturn value_2;
						
						}
						value_2 = 100;
						auto stored_value_2 = copy_value_2();
						//这时, stored_value_2 = 100, value_1 = 100
						//因为 copy_value_2 保存的是引用，也就是变量本体
						
						cout<< "value_2=" << value_2 <<endl;
						cout << "stored_value_2 = " << stored_value_2 << endl;
						
					}
					上述代码段执行结果为：
						value_1 =100
						stored_value_1=100
			
			3.隐式捕获
					手动书写捕获列表有时候是非常复杂的，这种机械性的工作可以交给编译	
				器来处理，这时候可以再补货列表中写一个&或者=想编译器声明采用引用捕获
				或值捕获。
					总结下来，补货提供了lambda表达式对外部值进行使用的功能，捕获列表
				的最常用的四种形式可以如下：
					I、[]	控制捕获列表
					II、[name1,name2,...]	捕获一系列变量
					III、[&]	引用捕获，让编译器自行推导捕获列表
					IV、[=]		值捕获，让编译器执行推导应用列表
			
			4.表达式捕获
				**这部分内容需要了解后面马上要提到的右值引用以及智能指针**
						上面提到的值捕获、引用捕获都是已经在外层作用域声明的变量，
					因此这些捕获方式不活的值均为左值，而不能捕获右值。
						c++14给与了我们方便，允许捕获的成员用任意的表达式进行初始化，
					这就与允许了右值的捕获，被声明的捕获变量类型会根据表达式进行判断，
					判断方式与适用auto本质上是相同的：
						#include <iostream>
						#include <utility>
						void learn_lambda_func_3(){
							auto important = std :: make_unique<int>(1);
							auto add = [v1 = 1.v2 = std::move(improtant)](int x,int y) ->int {
								return x+y+v1+(*v2);							
							
							};
							
							std::cout << "add(3,4) = " << add(3,4) << std::endl;
						}
					
							在上面的代码中，important 是一个独占指针，是不能够被捕获到的，这时候
						我们需要将其转移为右值，在表达式中初始化。
					
					
##今日心得
		c++需要好好练习，同时也需要熟记各种语法的用法。
		
		
###明日计划
		c++学习继续
					
					
					
					
					
			
