#git学习
	#分支与合并
		#删除分支
			当我们完成合并后，不再需要合并的那个分支的时候，可以使用下面的命令删除：
				git branch -d 闵瑞
			git branch -d只能删除那些已经被当前分支的合并的分支，如果没有合并，会出
			现以下错误：
				error: The branch '闵瑞' is not fully merged.
				If you are sure you want to delete it, run 'git branch -D 闵瑞'.
			但是，如果要强制删除，可以使用git branch -D 来进行删除,
			执行结果如下：
				Deleted branch 闵瑞 (was e1e521a).
		
		##撤销一个合并
			如果你觉得你合并后的状态是一团乱麻，想把当前的修改都放弃，你可以用下面
			的命令回到合并之前的状态：
			git reset --hard HEAD^  ---执行。使合并回到合并之前的状态。
			cat file1 ---查看file1的内容
			执行结果为：
				"test"
				"test"		
				结果可以看到之前写的"uodate"已经不见了。
		
		###快速向前合并
			通常，一个合并会产生一个合并提交（commit）， 把两个父分支里的每一行内容都
			合并进来。
			**注意**：
			但是，如果当前的分支和另一个分支没有内容上的差异，就是说当前分支的每一个提
			交（commit）都已经存在另一个分支里了，Git 就会执行一个 快速向前（fast forward）
			操作；Git 不创建任何新的提交（commit），只是将当前分支指向合并进来的分支。
		
	##git日志
		#查看日志
			可以使用git log命令查看所有的提交，
			具体如下：
				git log ---执行。
				结果为：
					commit fa113aceebdc9b365243bf6f8b0a4c397b858951 (HEAD -> MR)
					Author: MR <2324582555@qq.com>
					Date:   Fri Jun 14 17:52:04 2019 +0800

						update file on MR

					commit 22a90314ad96ea5ba308a4674873aa9e639f252f (master)
					Author: MR <2324582555@qq.com>
					Date:   Thu Jun 13 22:00:28 2019 +0800

						add 3 files
				如果提交的历史纪录很长，回车会逐步显示，输入 q 可以退出。
			git log有很多命令，在windows下可以使用 git log -help 来查看（linux：git help log），
			结果如下：
				usage: git log [<options>] [<revision-range>] [[--] <path>...]
				   or: git show [<options>] <object>...

					-q, --quiet           suppress diff output
					--source              show source
					--use-mailmap         Use mail map file
					--decorate-refs <pattern>
										  only decorate refs that match <pattern>
					--decorate-refs-exclude <pattern>
										  do not decorate refs that match <pattern>
					--decorate[=...]      decorate options
					-L <n,m:file>         Process line range n,m in file, counting from 1
			
		##日志统计	
			如果用 --stat 选项使用 git log，它会显示在每个提交（commit）中哪些文件被修改了， 这些
			文件分别添加或删除了多少行内容，这个命令相当于打印详细的提交记录：
			git log --stat  -- 执行
			结果为：
				commit fa113aceebdc9b365243bf6f8b0a4c397b858951 (HEAD -> MR)
				Author: MR <2324582555@qq.com>
				Date:   Fri Jun 14 17:52:04 2019 +0800

					update file on MR

				 file2 | 1 +
				 1 file changed, 1 insertion(+)

				commit 22a90314ad96ea5ba308a4674873aa9e639f252f (master)
				Author: MR <2324582555@qq.com>
				Date:   Thu Jun 13 22:00:28 2019 +0800

					add 3 files

				 file1 | 2 ++
				 file2 | 2 ++
				 file3 | 2 ++
				 3 files changed, 6 insertions(+)
		
		###格式化日志
			你可以按你的要求来格式化日志输出。--pretty 参数可以使用若干表现格式，如 oneline：
			git log --pretty = online ---执行
			结果为：
				fa113aceebdc9b365243bf6f8b0a4c397b858951 (HEAD -> MR) update file on MR 
				22a90314ad96ea5ba308a4674873aa9e639f252f (master) add 3 files
				结果中的HEAD表示指针的头部，也就是表示当前在哪个位置。这里就是在MR枝干上。
			
			或者你也可以使用 short 格式：
			git log --pretty = short --执行
			结果为：
				commit fa113aceebdc9b365243bf6f8b0a4c397b858951 (HEAD -> MR)
				Author: MR <2324582555@qq.com>

					update file on MR

				commit 22a90314ad96ea5ba308a4674873aa9e639f252f (master)
				Author: MR <2324582555@qq.com>

					add 3 files
			你也可用 medium，full，fuller，email 或 raw。 如果这些格式不完全符合你的需求， 你
			也可以用 --pretty=format 参数定义格式。

			--graph 选项可以可视化你的提交图（commit graph），会用ASCII字符来画出一个很漂亮的
			提交历史（commit history）线：
			代码：
				git log --graph --pretty = online
			结果：
				* fa113aceebdc9b365243bf6f8b0a4c397b858951 (HEAD -> MR) update file on MR
				* 22a90314ad96ea5ba308a4674873aa9e639f252f (master) add 3 files
			
		####日志排序
			按默认情况，提交会按逆时间顺序显示，可以指定 --topo-order 参数，让提交按拓扑顺序
			来显示（就是子提交在它们的父提交前显示）。
			具体操作如下：
				git log --pretty=format:'%h : %s' --topo-order --graph
				或者
				git log --pretty=oneline --topo-order --graph
			
			也可以用 --reverse 参数来逆向显示所有提交日志。
				git log --pretty = oneline --reverse
				结果为：
					22a90314ad96ea5ba308a4674873aa9e639f252f (master) add 3 files
					fa113aceebdc9b365243bf6f8b0a4c397b858951 (HEAD -> MR) update file on MR
				跟上面对比，刚好是相反的顺序显示。
		
		#####小结
		
			本节讲解了几个基本命令：
				git config：配置相关信息
				git clone：复制仓库
				git init：初始化仓库
				git add：添加更新内容到索引中
				git diff：比较内容
				git status：获取当前项目状况
				git commit：提交
				git branch：分支相关
				git checkout：切换分支
				git merge：合并分支
				git reset：恢复版本
				git log：查看日志
			

###今日心得
	git的学习有很强的逻辑性，虽然学的都是基础的，但也能感受到git的实用性很强。


####明日计划
	用自己创建的库进行git练习
	继续学习git
	
