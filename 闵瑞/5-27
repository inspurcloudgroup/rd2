#c++学习

    #constexpr
        c++本身是具有创术表达式的概念，但是在c++11之前在常量表达式中使用变量需要将该变量声明为const。例如数组定义：
            int a=3;  char b[a+2]; //是非法的
            const int a=3; char b[a+2]; //是合法的
        同时，常量表达式中使用函数在c++98之前编译器是无法得知的，在c++11中提供了constexpr让用户显示打的声明函数或者对象构造函数在编译时成为一个常数。
        例如：
            constexpr int shiyanlou(){ 
            return 3;
            }
            int k=shiyanlou() + 3;//在c++98之前这是非法的，但是在c++11里有关键词constexpr就可以使该过程合法
          
        
        但是从 C++14 开始，constexptr 函数可以在内部使用局部变量、循环和分支等简单语句，例如下面的代码在 C++11 的标准下是不能够通过编译的：
            constexpr int fibonacci(const int n) {
               if(n == 1) return 1;
               if(n == 2) return 1;
            return fibonacci(n-1)+fibonacci(n-2);
            }
        constexpr在解决一些复杂的问题是是非常有用的，而且对于可读性也有很好的帮助。
        
    ##类型推导
        auto：
            在传统 C++ 中，如果一个变量没有声明为 register 变量，将自动被视为一个 auto 变量。但是随着c++的发展register逐渐被弃用，使用auto就变得
            十分自然了。使用auto进行类型推导的最常见的例子就是迭代器（遍历器）。例如：    
            
                for(vector<int>::const_iterator itr = vec.cbegin(); itr != vec.cend(); ++itr)
                
                vector：向量 vector 是一种对象实体, 能够容纳许多其他类型相同的元素, 因此又被称为容器。 与string相同, vector 同属于STL(Standard 
                Template Library, 标准模板库)中的一种自定义的数据类型, 可以广义上认为是数组的增强版，在使用它时, 需要包含头文件 vector, #include
                <vector>。
                    vector<int> a ;                                //声明一个int型向量a
                    vector<int> a(10) ;                            //声明一个初始大小为10的向量
                    vector<int> a(10, 1) ;                         //声明一个初始大小为10且初始值都为1的向量
                    vector<int> b(a) ;                             //声明并用向量a初始化向量b
                    vector<int> b(a.begin(), a.begin()+3) ;        //将a向量中从第0个到第2个(共3个)作为向量b的初始值
                
                    int n[] = {1, 2, 3, 4, 5} ;
                    vector<int> a(n, n+5) ;              //将数组n的前5个元素作为向量a的初值
                    vector<int> a(&n[1], &n[4]) ;        //将n[1] - n[4]范围内的元素作为向量a的初值
                
                    在 vector<int> b(a.begin(), a.begin()+3) ; 这种声明形式中, (a.begin()、a.begin()+3) 表示向量起始元素位置到起始元素+3之间
                    的元素位置。(a.begin(), a.end())则表示起始元素和最后一个元素之外的元素位置。
                    向量元素的位置便成为遍历器, 同时, 向量元素的位置也是一种数据类型, 在向量中遍历器的类型为: vector<int>::iterator。 遍历器不但
                    表示元素位置, 还可以再容器中前后移动。
                
            而有了auto之后：
                // 由于 cbegin() 将返回 vector<int>::const_iterator 
                // 所以 itr 也应该是 vector<int>::const_iterator 类型
                for(auto itr = vec.cbegin(); itr != vec.cend(); ++itr);
                
                auto常见的用法：
                    auto a = 1; //a被推导为int
                    auto arr = new auto(10); //arr被推导为int
                    
                    int a; //变量存储在栈区
                    auto int b; //自动变量，存储在栈区
                    static int c; //静态变量，存储在数据区
                    register int d; //寄存器变量，存储在寄存器中
                    注意：auto 不能用于函数传参，因此下面的做法是无法通过编译的（考虑重载的问题，我们应该使用模板），例如：
                        int a(atuo x,auto y); //编译无法通过
                    auto 还不能用于推导数组类型：
                        #include <iostream>

                          int main() {
                           auto i = 5;

                           int arr[10] = {0};
                           auto auto_arr = arr;
                           auto auto_arr2[10] = arr;

                           return 0;
                          }
                    上述代码中，auto_arr2数组会报错，编译时需要这样编译：g++ -std=gnu++0x -o 编译后的文件名  需要编译的文件名（*.cpp）
        
        decltype：
            decltype 关键字是为了解决 auto 关键字只能对变量进行类型推导的缺陷而出现的。它的用法和 sizeof 很相似，语法：
                decltype(表达式);
                
                c++11引入尾返回类型，利用auto将返回值类型后置：
                    template<typename T, typename U>
                    auto add(T x, U y) -> decltype(x+y) {
                        return x+y;
                    }
                但是在c++14的时候，一下写法也变得合理了：
                    template<typename T, typename U>
                    auto add(T x, U y) {
                        return x+y;
                    }
                
##今日心得
    今天主要学习了c++的一些知识，从一个点会发现有很多的跟他涉及的其他点都不太明白，需要一个个搞明白，才能完全掌握该知识的用法。
    
###明日计划
    加强对c++的学习
    
                
                
                
                
                
                
                
