#c++学习
	#拷贝函数
			拷贝函数是一种特殊的函数，它在创建对象时，是使用同一类中之前创建的对象来
		初始化新创建的对象。拷贝构造函数通常用于：
			1.通过使用另一个同类型的对象来初始化新创建的对象。
			2.复制对象把它作为参数传递给函数。
			3.复制对象，并从函数返回这个对象。
			如果在类中没有定义拷贝构造函数，编译器会自行定义一个。如果类带有指针变量，
		并有动态内存分配，则它必须有一个拷贝构造函数。
			拷贝构造函数的最常见形式如下：
				classname (const classname &obj) {
				   // 构造函数的主体
				}
				在这里，obj 是一个对象引用，该对象是用于初始化另一个对象的。
			具体实例如下：
				***c++中new的语法规则：
					1.int *x = new int;  
					//开辟一个存放整数的存储空间，返回一个指向该存储空间的地址(即指针)
					2.int *a = new int(100);  
					//开辟一个存放整数的空间，并指定该整数的初值为100，返回一个指向该存储空间的地址
					3.char *b = new char[10];
					//开辟一个存放字符数组(包括10个元素)的空间，返回首元素的地址
					4. float *p=new float (3.14159);
					//开辟一个存放单精度数的空间，并指定该实数的初值为3.14159，将返回的该空间的地址赋给指针变量p
				
				#include <iostream>
 
				using namespace std;
				 
				class Line
				{
				   public:
					  int getLength( void );
					  Line( int len );             // 简单的构造函数
					  Line( const Line &obj);      // 拷贝构造函数
					  ~Line();                     // 析构函数
				 
				   private:
					  int *ptr;
				};
				 
				// 成员函数定义，包括构造函数
				Line::Line(int len)
				{
					cout << "调用构造函数" << endl;
					// 为指针分配内存
					ptr = new int;
					*ptr = len;
				}
				 
				Line::Line(const Line &obj)
				{
					cout << "调用拷贝构造函数并为指针 ptr 分配内存" << endl;
					ptr = new int;
					*ptr = *obj.ptr; // 拷贝值
				}
				 
				Line::~Line(void)
				{
					cout << "释放内存" << endl;
					delete ptr;
				}
				int Line::getLength( void )
				{
					return *ptr;
				}
				 
				void display(Line obj)
				{
				   cout << "line 大小 : " << obj.getLength() <<endl;
				}
				 
				// 程序的主函数
				int main( )
				{
				   Line line(10);
				 
				   display(line);
				 
				   return 0;
				
				}
				执行结果为：
					调用构造函数
					调用拷贝构造函数并为指针 ptr 分配内存
					line 大小 : 10
					释放内存
					释放内存
			修改后的代码：
				#include <iostream>
 
				using namespace std;
				 
				class Line
				{
				   public:
					  int getLength( void );
					  Line( int len );             // 简单的构造函数
					  Line( const Line &obj);      // 拷贝构造函数
					  ~Line();                     // 析构函数
				 
				   private:
					  int *ptr;
				};
				 
				// 成员函数定义，包括构造函数
				Line::Line(int len)
				{
					cout << "调用构造函数" << endl;
					// 为指针分配内存
					ptr = new int;
					*ptr = len;
				}
				 
				Line::Line(const Line &obj)
				{
					cout << "调用拷贝构造函数并为指针 ptr 分配内存" << endl;
					ptr = new int;
					*ptr = *obj.ptr; // 拷贝值
				}
				 
				Line::~Line(void)
				{
					cout << "释放内存" << endl;
					delete ptr;
				}
				int Line::getLength( void )
				{
					return *ptr;
				}
				 
				void display(Line obj)
				{
				   cout << "line 大小 : " << obj.getLength() <<endl;
				}
				 
				// 程序的主函数
				int main( )
				{
				   Line line1(10);
				 
				   Line line2 = line1; // 这里也调用了拷贝构造函数
					cout<<"通过创建新对象调用拷贝函数"<<endl;
				   display(line1);
				   display(line2);
				 
				   return 0;
				}	
				执行结果为：
					调用构造函数
					调用拷贝构造函数并为指针 ptr 分配内存
					通过创建新对象调用拷贝函数
					调用拷贝构造函数并为指针 ptr 分配内存
					line 大小 : 10
					释放内存
					调用拷贝构造函数并为指针 ptr 分配内存
					line 大小 : 10
					释放内存
					释放内存
					释放内存
					
			
##学习心得
		这里面还有有点小迷糊，为什么拷贝构造函数需要那样去写，需要去搜集更多的资料来
		考证。
		
		
###明日计划
	继续学习计划
					
					
			
