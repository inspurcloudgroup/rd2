#c++学习
	#类访问修饰符（public、private、protected）
			数据隐藏是面向对象编程的一个重要特点，它防止函数直接访问类类型的内部成员
		。类成员的访问限制是通过在类主体内部对各个区域标记public、private、protected
		来指定的。关键字public、private、protected成为访问说明符。
			一个类可以由于多个public、private或protected标记区域。每个标记区域在下一个
		标记区域开始之前都是有效地。成员和类的默认访问修饰符是private。
			如下：
				class Base{
					
					public:
					//public 成员定义区域
					
					private
					//private 成员定义区域
					
					protected
					//protected 成员定义区域
					
				
				}
				
		1.公有成员（public）
			公有成员在程序中类的外部是可以访问的。具体实例如下：
				#include <iostream>
				
				using namespace std;
				
				class Line{
					public:
						double len;
						void setLen(double length);
						double getLen(void);
			
				};
				
				//成员函数定义
				double Line::getLen(void){
					return len;
				
				}
				
				void Line::setLen(double length){
					return length;
				
				}
				
				int main(){
					Line line;
					
					//设置长度
					line.setLen(6.0);
					cout << "Length of line is :" << line.getLen()<<endl;
					
					//同时也可以不使用类函数，跟上一天的一样
					line.len = 10.0;
					//这里能使用len是因为len是public修饰的类变量
					
					cout << "Length of line is :" << line.len<<endl;
					
					return 0;
				}
				执行结果为：
					Length of line is :6
					Length of line is :10
					
		2.私有成员（private）
				私有成员变量函数在类的外部是不能被访问的，甚至是不可以被查看。只有
			类和友元函数可以访问私有成员。
				默认情况下，类的所有成员都是私有的。例如在下面的类中，width是一个私
			有成员，这意味着，如果您没有使用任何访问修饰符，类的成员被假定为私有成员：
				class Box
				{
				   double width;//私有变量
				   
				   //私有成员
				   public:
					  double length;
					  void setWidth( double wid );
					  double getWidth( void );
				};
				
			实际操作中，我们一般会在私有区域定义数据，在公有区域定义相关的函数，以便
		在类的外部也可以调用这些函数，如下所示：
				#include <iostream>
 
				using namespace std;
				 
				class Box
				{
				   public:
					  double length;
					  void setWidth( double wid );
					  double getWidth( void );
				 
				   private:
					  double width;
				};
				 
				// 成员函数定义
				double Box::getWidth(void)
				{
					return width ;
				}
				 
				void Box::setWidth( double wid )
				{
					width = wid;
				}
				 
				// 程序的主函数
				int main( )
				{
				   Box box;
				 
				   // 不使用成员函数设置长度
				   box.length = 10.0; // OK: 因为 length 是公有的
				   cout << "Length of box : " << box.length <<endl;
				 
				   // 不使用成员函数设置宽度
				   // box.width = 10.0; // Error: 因为 width 是私有的
				   box.setWidth(10.0);  // 使用成员函数设置宽度
				   cout << "Width of box : " << box.getWidth() <<endl;
				 
				   return 0;
				}
				执行结果为：	
					Length of box : 10
					Width of box : 10
		
		3.保护成员（protected）
				保护成员变量或函数与私有成员十分相似，但有一点不同，保护成员在派生
			类（即子类）中是可访问的。
			具体实例如下：
				#include <iostream>
				using namespace std;
				 
				class Box
				{
				   protected:
					  double width;
				};
				 
				class SmallBox:Box // SmallBox 是派生类
				{
				   public:
					  void setSmallWidth( double wid );
					  double getSmallWidth( void );
				};
				 
				// 子类的成员函数
				double SmallBox::getSmallWidth(void)
				{
					return width ;
				}
				 
				void SmallBox::setSmallWidth( double wid )
				{
					width = wid;
				}
				 
				// 程序的主函数
				int main( )
				{
				   SmallBox box;
				 
				   // 使用成员函数设置宽度
				   box.setSmallWidth(5.0);
				   cout << "Width of box : "<< box.getSmallWidth() << endl;
				 
				   return 0;
				}
				执行结果为：	
					Width of box : 5
		
		4.继承中的特点
				基本语法：
				class B : public A{...}；
				class B : private A{...}；
				class B : protected A{...}；
				
				有public, protected, private三种继承方式，它们相应地改变了基类成员
			的访问属性。
				I.public 继承：基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：public, protected, private
				II.protected 继承：基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：protected, protected, private
				III.private 继承：基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：private, private, private
				但无论哪种继承方式，上面两点都没有改变：
					∴private 成员只能被本类成员（类内）和友元访问，不能被派生类访问；
					∴protected 成员可以被派生类访问。
				

##今日心得
		通过基础来c++感觉很良，而且很充实，基本都能理解，知识点之间的跨度不大。
		

###明日计划
		继续抓紧机会学习
				
				
				
