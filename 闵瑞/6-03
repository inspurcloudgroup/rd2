#c++学习
	#c++随机数
		c++随机数的生成需要rand()函数和srand()函数来共同完成，rand()函数是用来生成伪随机数的一个函数，
		srand()函数是为rand()函数提供一个种子，通过srand()函数可以用来设置rand()函数每次生成的伪随机
		数，让他们是否与前一次的生成结果一致，在这里就涉及一个time()函数来获取当前时间，从而达到让函
		数rand()每次生成的结果不一样。
		每次不一致随机数生成的语法：
			srand([(unsigned)] time(NULL));
		每次都一致的语法:
			srand(unsigned seed);//seed是该伪随机数的种子值
			
			
	##c++数组
		数组是用来存储一系列数据，但它往往被认为是一系列相同类型的变量。
		#数组的声明
			声明一个数组需要指定元素的类型和元素的数量，语法如下：
				类型   数组名称[数组元素个数（大于0的常数）];
				例如：
					int arr[5];		//合法数组
					int arr_1[-1];	//非法数组
			上面这个定义的数组被称为一位数组，多维数组定义如下：
				类型   数组名称[大于0的常数][大于0的常数]...;
				例如：
					int arr[2][3];			//合法数组
					int arr_1[1][5][3][5];	//合法数组
					int arr_2[0][3][9];		//非法数组
		
		##初始化数组
			在c++中，可以逐个初始化数组，比如：
				int arr[3];
				arr[0] = 2
				arr[1] = 1;
				arr[2] = 5;
			也可以使用一个初始化语句，例如：
				int arr[3] = { 2, 1, 5};		//{}里面的元素个数不能大于[]里面的数值
				多维数组：
					arr_1[2][3] = {{1,0}, {1,3}, {2,5}, {5,7},{4,1},{2,3}};
					初始化的值是从arr_1[0][0] --> arr_1[0][1] --> arr_1[0][2]....-->arr_1[1][2]
			也可以这样写：
			int arr[] = { 2, 1, 5};			//如果省略掉数组的大小（即[]里面的数值，数组的大小就为初
											  始化元素的个数）
											  
		##指向数组的指针
			指向数组的指针的数组名是一个指向数组中第一个元素的常量指针。例如：
				double *p;			//定义指针p
				double arr[10];		//定义一个元素为10的一维数组							  
				p = arr;			//把arr[]数组的第一个元素赋值给p指针
				指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。
				因此，可以通过*(arr + 1)获取arr[1]的值。
		
		###传递数组给函数
			c++里面是不允许向函数传递一个完整的输出作为参数，但是，可以通过指定不带索引的数组名来传递
			一个指向数组的指针。因此，可以通过以下三种声明方式来声明函数形式参数，结果是一样的，如下：
				方式1：
					形式参数是一个指针
					void 方法名(int *p){
					
					......
					}
				方式2：
					形式参数是一个已定义大小的数组
					void 方法名(int 数组[大小]){
					
					......
					}
				方式3：
					形式参数是一个未定义大小的数组
					void 方法名(int 数组[]){
					
					......
					}
		
		####从函数返回数组
			c++不允许返回一个完整的数组作为函数的参数，但是可以通过制定不带索引的数组名来返回一个指向
			数组的指针。声明如下：
				int * 方法名(){
				
				......
				}
			另外，c++不允许在函数外部返回局部变量的地址，除非定义局部变量为static变量。
			
		#####访问数组元素
			数组中的特定元素可以通过索引来访问，例如：
			int arr[]={1,2,3,4,5}；
			可以通过arr[2]来获取数组中的第三个元素，因为数组是从0开始计算的。

##学习心得
	逐渐进入c++的学习，感觉学习比刚开始轻松了不少。

###明日计划
	学习c++
	
