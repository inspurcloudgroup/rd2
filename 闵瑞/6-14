#git学习
	#git的分支与合并
		#分支
			解释：
				git的分支可以在不影响主线（master主轴）的基础上，进行代码的提交，
				就相当于树结构。
				分支的作用体现在多人协作开发中，比如一个团队开发软件，你负责独立
				的一个功能需要一个月的时间来完成，你就可以创建一个分支，只把该功
				能的代码提交到这个分支，而其他同事仍然可以继续使用主线开发，你每
				天的提交不会对他们造成任何影响。当你完成功能后，测试通过再把你的
				功能分支合并到主线。
			#创建分支
				一个 Git 仓库可以维护很多开发分支。
				例如创建一个分支（windows下）：
					git branch 闵瑞 ----执行。创建新的分支
					git branch  ----执行。查看当前的分支列表，以及开发环境处于哪一
					个分支上
					结果为：
						  MR
						* master
			##切换分支
				切换到其他分支的语法如下：
					git checkout 分支名
				例如（windows下）：
					git checkout 闵瑞  ----执行。切换分支到闵瑞
					执行结果为：
						Switched to branch '闵瑞'
						
					echo "update" >> file1 ---执行。修改或者创建修改文件内容为 "update"
											  如果没有该文件名，则新建该文件然后在写入内容
					git status ---执行。查看文件详细情况
					执行结果为：
						On branch 闵瑞
						Changes not staged for commit:
						  (use "git add <file>..." to update what will be committed)
						  (use "git checkout -- <file>..." to discard changes in working directory)

								modified:   file1

						Untracked files:
						  (use "git add <file>..." to include in what will be committed)

								file4

						no changes added to commit (use "git add" and/or "git commit -a")
						
					git add file1 ---执行，添加到缓存区
					git commit -m "update file1" ---执行。提交file1文件
					type file1 ---（linux：cat file1）执行，查看文本内容
					执行结果为：
						"update"
						
					git checkout master ---执行。切回master主干
			
			###合并分支
				现在可以在 master 分支下再作一些不同的修改：
				具体操作如下(windows环境)：
					echo "this is file2" >> file ---执行。修改文件file2的文本内容
					git status ---执行。查看当前情况
					执行结果为：
						On branch MR
						Changes not staged for commit:
						  (use "git add <file>..." to update what will be committed)
						  (use "git checkout -- <file>..." to discard changes in working directory)

								modified:   file2

						Untracked files:
						  (use "git add <file>..." to include in what will be committed)

								file4

						no changes added to commit (use "git add" and/or "git commit -a")
					
					git add file2 ---执行。添加file2到缓存区
					git commit -m "update file2 on MR" ---执行。提交命令
					执行结果为：
						[MR fa113ac] update file on MR
						 1 file changed, 1 insertion(+)
					type file2 ---执行（linux为：cat file2）。查看文件file2
					执行结果为：
						"test"
						"test"
						"this is file2"
					通过上面的操作，现在已经有两个不同内容的分支了，接下来就是合并。
				
				合并操作具体如下（windows下）：
					通过下面的 git merge 命令来合并 experimental 到主线分支 master
					git checkout MR ---执行。切换到MR分支
					
					
##c++学习
	#日期和时间
		在c++中要使用时间相关的函数和结构，需要引入头文件<ctime>,
		如下：
			include<ctime>
		c++中有4个和时间相关的类型：
			clock_t、time_t、size_t、tm。
			其中clock_t、size_t和time_t能够把系统时间和日期表示为某种整数。
			而结构tm是把日期和时间以c结构的形式保存。
			tm的结构定义如下：
				struct tm{
					//秒，正常范围从0到59，但允许至61
					int tm_sec; 
					
					//分，范围0到59
					int tm_min;
					
					//小时，范围0到23
					int tm_hour;
					
					//一个月中的第几天，范围1到31
					int tm_day;
					
					//月，范围从0到11
					int tm_mon;
					
					//自1900年起的年数
					int tm_year;
					
					//一周中的第几天，范围0到6,0表示星期日
					int tm_wday;
					
					//一年中的第几天，范围0到365，从1月1日起算
					int tm_yday;
					
					/*夏令时，实行夏令时的时候，tm_isdst为正。不实行夏令时的进
					候，tm_isdst为0；不了解情况时，tm_isdst()为负*/
					int tm_isdst;
					
				}
			除此之外，还有许多与时间有关的函数，
			具体如下：
				1. time_t time(time_t *time);
					该函数返回的是系统的当前日历时间，自1970年1月1日以来
					经历过的时间秒数。如果系统没有时间，则返回.1。
				
				2. char *ctime(const time_t *time);
					该函数返回一个表示当地时间的字符串指针，返回的字符串
					形式：day month year hour:minutes:seconds
						  year\n
				
				3.struct tm *localtime(const time_t *time);
					该函数返回一个表示本地时间的tm结构的指针。
				
				4.clock_t clock(void);
					该函数返回程序执行起（一般为程序的开头），处理器时钟所使用的时间
					。如果时间不可以用，则返回.1。
					
				5.char *asctime(const struct tm *time);
					该函数返回一个指向字符串的指针，该字符串包含time所指向结构中存储的
					信息，返回形式为：day month date hour:minutes:seconds:year\n
					
				6.struct tm*gmtime(const time_t *time);
					该函数返回一个指向time的指针，time为tm结构，用协调世界时（UTC）也被
					成为格林尼治标准时间（GMT）表示。跟上面第3条有点相似。
				
				7.time_t mktime(struct tm *time);
					该函数返回日历时间，相当于time所指向结构中存储的时间。
					
				8.double difftime(time_t time2,time_t time1);
					该函数返回time1和time2之间的时间差。单位为：秒
				
				9.size_t strftime();
					该函数可用于格式化日期和时间为指定的格式。
				
			
###今日心得
	git的使用需要不断地练习才能真正的理解和掌握，跟c++不一样，git的学习都很连贯，只有一步
	接着一步的学习，才能掌握git；通过今天对c++时间的学习，发现c++的知识点很多，每个知识点
	的内容也很多，需要慢慢消化，不能急于求成。
	

####明日计划
	学习git
	学习c++
