#c++学习
	#右值引用和左值引用
		
		将亡值---->临时的值能够被识别，同时又能够被移动。
		
		需要拿到一个将亡值，就需要用到右值引用的申明：T &&，其中T是类型。右值引用的
	声明让这个临时值得生命周期得以延长、只要变量，那么将亡值就能够继续存活。
	
		c++11提供了std::move这个方法将左值参数无条件的转化为右值，有了它我们就可以方
	便的获得一个右值的临时对象，如下
			#include <iostream>
			#include <string>

			void reference(std::string& str) {
				std::cout << "左值" << std::endl;
			}
			void reference(std::string&& str) {
				std::cout << "右值" << std::endl;
			}

			int main()
			{
				std::string  lv1 = "string,";       // lv1 是一个左值
				// std::string&& r1 = s1;           // 非法, s1 在全局上下文中没有声明
				std::string&& rv1 = std::move(lv1); // 合法, std::move 可以将左值转移为右值
				std::cout << "rv1 = " << rv1 << std::endl;      // string,

				const std::string& lv2 = lv1 + lv1; // 合法, 常量左值引用能够延长临时变量的生命周期
				// lv2 += "Test";                   // 非法, 引用的右值无法被修改
				std::cout << "lv2 = "<<lv2 << std::endl;      // string,string

				std::string&& rv2 = lv1 + lv2;      // 合法, 右值引用延长临时对象的生命周期
				rv2 += "string";                    // 合法, 非常量引用能够修改临时变量
				std::cout << "rv2 = " << rv2 << std::endl;      // string,string,string,

				reference(rv2);                     // 输出左值
			}
			
			注意：rv2 虽然引用了一个右值，但由于它是一个引用，所以 rv2 依然是一个左值。
			
			
##今日心得
	值的左右之分还是十分难懂，还要继续查找更多的资料加以理解。
	
	
###明日计划
	继续学习c++
