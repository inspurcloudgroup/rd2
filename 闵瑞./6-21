##c++学习
	##接前一天c++数据结构
		#访问结构成员
				为了访问结构的成员，我们使用成员访问运算符（.）。成员访问运算符是结
			构变量名称和我们要访问的结构成员之间的一个句号。
				下面的实例演示了结构的用法：
					#include<iostream>
					#include<cstring>
					
					using namespace std;
					
					//声明一个结构体类型Books
					struct Books{
						char title[50];
						char author[50];
						char subject[100];
						int book_id;
					
					}	;
					/*注意这里有一个分号在最后面，','和'}'之间可以直接定义Books的
					变量，也可以如下文一样定义，在这的话，直接添加'Book1,Book2'即
					可*/
					
					int main(){
						//定义结构体类型Books的变量Book1，相当于用Book1代替Books
						Books Book1;
						//定义结构体类型Books的变量Book2
						Books Book2;
						
						// Book1 内容赋值
						//strcpy是string copy的缩写，把后一个参数复制给前一个
					    strcpy( Book1.title, "C++ 教程");
					    strcpy( Book1.author, "Runoob"); 
					    strcpy( Book1.subject, "编程语言");
					    Book1.book_id = 12345;
					 
					    // Book2 内容赋值
					    strcpy( Book2.title, "CSS 教程");
					    strcpy( Book2.author, "Runoob");
					    strcpy( Book2.subject, "前端技术");
					    Book2.book_id = 12346;
					 
					    // 输出 Book1 信息
					    cout << "第一本书标题 : " << Book1.title <<endl;
					    cout << "第一本书作者 : " << Book1.author <<endl;
					    cout << "第一本书类目 : " << Book1.subject <<endl;
					    cout << "第一本书 ID : " << Book1.book_id <<endl;
					 
					    // 输出 Book2 信息
					    cout << "第二本书标题 : " << Book2.title <<endl;
					    cout << "第二本书作者 : " << Book2.author <<endl;
					    cout << "第二本书类目 : " << Book2.subject <<endl;
					    cout << "第二本书 ID : " << Book2.book_id <<endl;
					 
					    return 0;
					}
					上述代码的返回结果为：
						第一本书标题 : C++ 教程
						第一本书作者 : Runoob
						第一本书类目 : 编程语言
						第一本书 ID : 12345
						第二本书标题 : CSS 教程
						第二本书作者 : Runoob
						第二本书类目 : 前端技术
						第二本书 ID : 12346
			
		
		##结构作为函数参数
				您可以把结构作为函数参数，传参方式与其他类型的变量或指针类似。
				您可以使用上面实例中的方式来访问结构变量：		
					#include <iostream>
					#include <cstring>
					 
					using namespace std;
					void printBook( struct Books book );
					 
					// 声明一个结构体类型 Books 
					struct Books
					{
					   char  title[50];
					   char  author[50];
					   char  subject[100];
					   int   book_id;
					};
					 
					int main( )
					{
					   Books Book1;        // 定义结构体类型 Books 的变量 Book1
					   Books Book2;        // 定义结构体类型 Books 的变量 Book2
					 
						// Book1 详述
					   strcpy( Book1.title, "C++ 教程");
					   strcpy( Book1.author, "Runoob"); 
					   strcpy( Book1.subject, "编程语言");
					   Book1.book_id = 12345;
					 
					   // Book2 详述
					   strcpy( Book2.title, "CSS 教程");
					   strcpy( Book2.author, "Runoob");
					   strcpy( Book2.subject, "前端技术");
					   Book2.book_id = 12346;
					 
					   // 输出 Book1 信息
					   printBook( Book1 );
					 
					   // 输出 Book2 信息
					   printBook( Book2 );
					 
					   return 0;
					}
					void printBook( struct Books book )
					{
					   cout << "书标题 : " << book.title <<endl;
					   cout << "书作者 : " << book.author <<endl;
					   cout << "书类目 : " << book.subject <<endl;
					   cout << "书 ID : " << book.book_id <<endl;
					}
					当上面的代码被编译和执行时，它会产生下列结果：
						书标题 : C++ 教程
						书作者 : Runoob
						书类目 : 编程语言
						书 ID : 12345
						书标题 : CSS 教程
						书作者 : Runoob
						书类目 : 前端技术
						书 ID : 12346
					
					
		###指向结构的指针			
			您可以定义指向结构的指针，方式与定义指向其他类型变量的指针相似。
			如下所示：		
				struct Books *struct_pointer;	
				现在，您可以在上述定义的指针变量中存储结构变量的地址。为了查找结构
			变量的地址，请把 & 运算符放在结构名称的前面。如下所示。
			如下所示：		
				struct_pointer = &Book1;	
			为了使用指向该结构的指针访问结构的成员，您必须使用 -> 运算符。
			如下所示：	
				struct_pointer->title;	
			详细实例如下：
				#include <iostream>
				#include <cstring>
				 
				using namespace std;
				void printBook( struct Books *book );
				 
				struct Books
				{
				   char  title[50];
				   char  author[50];
				   char  subject[100];
				   int   book_id;
				};
				 
				int main( )
				{
				   Books Book1;        // 定义结构体类型 Books 的变量 Book1
				   Books Book2;        // 定义结构体类型 Books 的变量 Book2
				 
					// Book1 详述
				   strcpy( Book1.title, "C++ 教程");
				   strcpy( Book1.author, "Runoob"); 
				   strcpy( Book1.subject, "编程语言");
				   Book1.book_id = 12345;
				 
				   // Book2 详述
				   strcpy( Book2.title, "CSS 教程");
				   strcpy( Book2.author, "Runoob");
				   strcpy( Book2.subject, "前端技术");
				   Book2.book_id = 12346;
				 
				   // 通过传 Book1 的地址来输出 Book1 信息
				   printBook( &Book1 );
				 
				   // 通过传 Book2 的地址来输出 Book2 信息
				   printBook( &Book2 );
				 
				   return 0;
				}
				// 该函数以结构指针作为参数
				void printBook( struct Books *book )
				{
				   cout << "书标题  : " << book->title <<endl;
				   cout << "书作者 : " << book->author <<endl;
				   cout << "书类目 : " << book->subject <<endl;
				   cout << "书 ID : " << book->book_id <<endl;
				}
				当上面的代码被编译和执行时，它会产生下列结果：	
					书标题  : C++ 教程
					书作者 : Runoob
					书类目 : 编程语言
					书 ID : 12345
					书标题  : CSS 教程
					书作者 : Runoob
					书类目 : 前端技术
					书 ID : 12346
		
		
		####typedef 关键字
			下面是一种更简单的定义结构的方式，您可以为创建的类型取一个"别名"。
			例如：			
				typedef struct Books
				{
				   char  title[50];
				   char  author[50];
				   char  subject[100];
				   int   book_id;
				}Books;	
				语法如下：
					typedef  类型A  A的别名（A的新名字）
				现在，就可以直接使用 Books 来定义 Books 类型的变量，而不需要使用
			struct 关键字。
			下面是实例：	
				Books Book1, Book2; 和 struct Book1和Book2;  效果是一样的	
			
			您可以使用 typedef 关键字来定义非结构类型，如下所示：
				typedef long int *pint32;
				pint32 x, y, z;	
				x, y 和 z 都是指向长整型 long int 的指针。


##今日心得
		c++的基础也学的差不多了，感觉很多东西都得到了解答，但也存在很多疑惑，需要
	慢慢去消化和不断地在练发现新的问题。
	
	
###明日计划
	深入学习c++
	了解分布式存储
	
