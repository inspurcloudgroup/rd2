#c+学习
	##初始化列表
		初始化是一个非常重要的语言特性，可以对对象进行初始化，也可以对变量、数组等进行初始化。
		变量初始化：
			int  a;
			a = 5;
			
		 数组初始化：
			int arr[3] = {1 ,2 ,3 };
		
		初始化列表：
			对普通数组、POD （plain old data，没有构造、析构和虚函数的类或结构体）类型都可以
			使用 {} 进行初始化，也就是我们所说的初始化列表。
			int arr[3] = {1,2,3};   // 列表初始化

			class Foo {				//类名Foo
			private:				//行为或者属性
				int value;
			public:
				Foo(int) {}			//构造函数，与类名相同成员函数
			};

			Foo foo(1);             // 普通构造初始化
			
		在c++11之后，为了解决不同方法都针对各自对象不能通用的问题，提出了std::initializer_list初始化
		列表构造函数，通过该方法就可以为类对象的初始化与普通数组和 POD 的初始化方法提供了统一的桥梁。
		例如：
			#include <initializer_list>

			class Magic {
			public:
				Magic(std::initializer_list<int> list) {}  //定义构造函数
			};

			Magic magic = {1,2,3,4,5};				    //初始化构造函数
			std::vector<int> v = {1, 2, 3, 4};			   //vector能容纳绝大多数类型的对象作为其元素，
										     但因为引用不是对象，所以不存在包含引用的vector。
				
		初始化列表除了用在对象构造上，还能将其作为普通函数的形参，例如：
			void func(std::initializer_list<int> list) {
				return;
			}

			func({1,2,3});
			
		其次，C++11 提供了统一的语法来初始化任意的对象，例如：
			struct A {
				int a;
				float b;
			};
			struct B {

				B(int _a, float _b): a(_a), b(_b) {}
			private:
				int a;
				float b;
			};

			A a {1, 1.1};    // 统一的初始化语法
			B b {2, 2.2};
	
	
	##模板增强
		外部模板
			传统 C++ 中，只要在每个编译单元（文件）中编译的代码中遇到了被完整定义的模板，都会实例化。
			这就造成了反复实例化导致编译的时间不断增加的问题。
			C++11 引入了外部模板，扩充了原来的强制编译器在特定位置实例化模板的语法，使得能够显式的告
			诉编译器何时进行模板的实例化：
				template class std::vector<bool>;            // 强行实例化
				//template：模板  vector：容器
				extern template class std::vector<double>;   // 不在该编译文件中实例化模板 
		
		尖括号 ">"
			在传统 C++ 的编译器中，>>一律被当做右移运算符来进行处理。但实际上我们很容易就写出了嵌套模
			板的代码：
				std::vector< std::vector<int> > wow;	//无法编译过程
			而 C++11 开始，连续的右尖括号将变得合法，并且能够顺利通过编译。
		
		类型别名模板
			模板和类型的区别：
				模板是用来产生类型的。在传统 C++中，typedef 可以为类型定义一个新的名称，但是却没有办法
				为模板定义一个新的名称。
				语法：
					typedef 原名称 新名称;
				C++11 使用 using 引入了下面这种形式的写法，并且同时支持对传统 typedef 相同的功效：
				typedef int (*process)(void *);  		// 定义了一个返回类型为 int，参数为 void* 的函数指针类
										   型，名字叫做 process
				using process = int(*)(void *); 		// 同上, 更加直观

				template <typename T>
				using NewType = SuckType<int, T, 1>;    // 合法
		
		默认模板参数
			我们可以定义了一个加法函数：
				template<typename T, typename U>
				auto add(T x, U y) -> decltype(x+y) {
					return x+y;
				}
			但在使用时发现，要使用 add，就必须每次都指定其模板参数的类型。
			在 C++11 中提供了一种便利，可以指定模板的默认参数：
				template<typename T = int, typename U = int>
				auto add(T x, U y) -> decltype(x+y) {
					return x+y;
	
			}
			
			
##今日心得
	回顾了组天没弄明白的列表初始化，现在搞明白了，之后学习了模板的使用，发现有很多新的语法，需要慢慢学习。
		

###明日计划
	学习c++指针
			

			
			
			
			
			
			
			
			
